//scnucpc 2013 final 1001 Easy problem
/*
首先计算出各个数的规律，然后打表
*/

#include <iostream>
#include <cstdio>
#include <string.h>
#include <cmath>
#define MAXK 1000000

using namespace std;

//int ct[MAXK];
//int ans[1010];

int answer[] = {0,2,4,6,6,12,12,12,24,24,24,30,30,30,60,60,60,60,60,60,60,60,60,120,120,120,120,120,120,120,120,120,180,180,180,180,180,180,210,210,210,360,360,360,360,360,360,360,360,360,360,360,360,420,420,420,420,420,420,420,420,420,420,420,420,420,420,420,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,840,1260,1260,1260,1260,1260,1260,1260,1260,1260,1260,1260,1260,1260,1260,1260,1260,1260,1260,1680,1680,1680,1680,1680,1680,1680,1680,1680,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,4620,7560,7560,7560,7560,7560,7560,7560,7560,7560,7560,7560,7560,7560,7560,7560,7560,7560,7560,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,9240,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,13860,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,18480,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,27720,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,55440,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,83160,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,110880,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,120120,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180,180180};

int main()
{
//    //**********************************************
//    //product data
//    freopen("out","w",stdout);
//    memset(ct,0,sizeof(ct));
//    memset(ans,0,sizeof(ans));
//    long long tmp,tt ;
//    long long maxi = 1;
//    ct[1] = 1;
//    for (int i=2;i<MAXK;i++)
//    {
//
//        tmp = i;
//        tt = (long)i;
//        tt *= i;
//        for (int j=1;j<=i;j++)
//        {
//            if (tt%j==0)
//                ct[i]++;
//
//        }
//        if (ct[i]>ct[maxi])
//        {
//            maxi = i;
//        }
//        if (ct[i]>=1000)
//        {
//            break;
//        }
//    }
//    int no = 1;
//    for (int i=1;i<=maxi;i++)
//    {
//        while(ct[i]>no)
//        {
//            ans[no++] = i;
//            if (no>1000) break;
//        }
//        if (no>1000) break;
//    }
//    for (int i=1;i<=1000;i++)
//    {
//        printf("%d,",ans[i]);
//    }
//    //**********************************************
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n;
        scanf("%d",&n);
        printf("%d\n",answer[n]);
    }
    return 0;
}
